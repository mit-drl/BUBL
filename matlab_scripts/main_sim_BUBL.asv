%{
    Yaw Simulation for BUBL
    Author: Guillermo D. Mendoza

    Dynamics Equation:
        Mv_dot + C(v)v + D(v)v + g(eta) = tau

        Where:
            - v is the velocity of the robot
            - M is the inertia matrix
            - D is the hydrodynamic drag
            - g is the gravitational and buoyancy forces (restoring forces)
            - tau is the control forces and torques
            - eta is the state vector of the positions of the robot in the
            intertial frame

    Assumptions:
        - Coriolis Force can be neglected due to slow velocity of robot
          (~0.3m/s)
        - Restoring force has not influence on the motion of surge, sway, heave
          and yaw (therefore we can neglect g(eta)

    From our assumptions the equation becomes:
        Mv_dot + D(v)v = tau

%}

%% Define Variables and Transfer Function for Yaw

m = 0.1200; % mass of robot (kg)
R = 0.032; % radius of robot (m)
C_d = 0.5; % approximate value (Reynolds number for spherical body)

rho_w = 997; % density of water (kg/m^3)
mu = 10^(-3); % fluid viscosity (Pa)

a = 20 * pi/180; % degree selected to provide minimum sufficient dive thrust
alpha = 0.024; % moment arm for the fluid jets (m)

% define the actuation matrix
B = [cos(a), -cos(a), cos(a), -cos(a);
     zeros(1,4);
     sin(a), sin(a), sin(a), sin(a);
     -alpha * sin(a), -alpha * sin(a), alpha * sin(a), alpha * sin(a);
     zeros(1,4);
     -alpha * cos(a), alpha * cos(a), alpha * cos(a), -alpha * cos(a)];

m_a = 2/3 * pi * R^3 * rho_w; % added mass of fluid interaction
I_aa = 2/5 * m * R^2; % moment of intertia of robot

yaw_tf = yaw_transfer_func(m,m_a,rho_w,C_d,R, I_aa, mu, B)

%% Define Initial Kp, Ki, Kd values

% Established by Pascal previously
Kp0 = 12;
Kd0 = 9;

%% Simulate Step Response of PID and Fuzzy PID



%% Simulate Step

%% Disturbance based

dt = 0.01;  % Time step
omega = log(2);  % Frequency of the input signal
previous_error = 0;  % Initialize previous error
t = 0:dt:10;  % Simulation time vector

u = sin(omega * t);  % Input signal
yaw = zeros(size(t));  % Initialize yaw response
disturbance = zeros(size(t));
disturbance_idx = round(length(t)/2);
disturbance(disturbance_idx) = 1;

for k = 2:length(t)
    % Compute error
    error = u(k) - yaw(k-1);
    d_error = (error - previous_error) / dt;
    
    % Update gains using fuzzy rules
    [Kp, Kd] = fuzzyRules(Kp0, Kd0, error, d_error);
    
    % Define fuzzy PID controller transfer function
    s = tf('s');
    Ks = Kp + Kd * s;
    
    % Simulate the system with feedback and disturbance
    y = lsim(feedback(yaw_tf * Ks, 1), u + disturbance, t);
    yaw(k) = y(k) + disturbance(k);  % Add disturbance to the output
    
    % Update controller parameters
    Kp0 = Kp;
    Kd0 = Kd;
    previous_error = error;
end

% Plot results
figure;
plot(t, u, 'b', 'DisplayName', 'Input Signal (u)');
hold on;
plot(t, yaw, 'r', 'DisplayName', 'System Output (yaw)');
plot(t, disturbance, 'k--', 'DisplayName', 'Disturbance');
legend;
xlabel('Time (s)');
ylabel('Amplitude');
title('System Response with Disturbance');
grid on;
